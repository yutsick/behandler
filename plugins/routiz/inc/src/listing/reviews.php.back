<?php

namespace Routiz\Inc\Src\Listing;

use \Routiz\Inc\Src\Listing\Listing;

class Reviews {

    use \Routiz\Inc\Src\Traits\Singleton;

    public $listing;
    public $meta;

    public $comments_open;
    public $page;
    public $max_num_pages;
    public $found_comments;
    public $comments = [];

    function __construct() {

        $this->request = \Routiz\Inc\Src\Request\Request::instance();
        $listing_id = $this->request->has('listing_id') ? $this->request->get('listing_id') : get_the_ID();
        $this->listing = new Listing( $listing_id );

        $this->comments_open = comments_open( $this->listing->id );

        if( $this->comments_open ) {
            $this->meta();
            $this->identity();
            $this->query();
        }

    }

    public function meta() {

        global $wpdb;
        $comments_num = (int) $wpdb->get_var( $wpdb->prepare("
        	SELECT COUNT( comment_ID )
        	FROM {$wpdb->comments}
        	WHERE comment_approved = 1
            AND comment_post_ID = %d
        	AND comment_parent = 0
        ", $this->listing->id ) );

        $this->meta = (object) [
            'listing' => (object) [
               'listing_review_total' => $comments_num,
               // 'listing_review_average' => round( floatval( $this->listing->get('rz_review_rating_average') ), 2 ),
               'listing_review_average' => 123,
            ],
            'type' => (object) [
                'comments_per_page' => (int) $this->listing->type->get('rz_reviews_per_page'),
                'enable_media' => $this->listing->type->get('rz_enable_review_media'),
                'enable_ratings' => $this->listing->type->get('rz_enable_review_ratings'),
                'ratings' => Rz()->jsoning( 'rz_review_ratings', $this->listing->type->id ),
            ],
        ];

    }

    public function identity() {

        global $wpdb;

        $this->found_comments = $wpdb->get_var(
            $wpdb->prepare("
                SELECT COUNT(*)
                FROM {$wpdb->comments}
                WHERE comment_approved = 1
                AND comment_parent = 0 AND
                comment_post_ID = %d
            ", $this->listing->id )
        );

        $this->page = $this->request->has('onpage') ? max( 1, $this->request->get('onpage') ) : Rz()->paged();
        $this->max_num_pages = ceil( $this->found_comments / max( 1, $this->meta->type->comments_per_page ) );

    }

    public function query() {

        if( $this->found_comments > 0 ) {

            $comment_query = new \WP_Comment_Query;
            $this->comments = $comment_query->query([
                'post_id' => $this->listing->id,
                'status' => 'approve',
                'parent' => 0,
                'hierarchical' => false,
                'orderby' => 'comment_date',
                'order' => 'DESC',
                'number' => $this->meta->type->comments_per_page,
                'offset' => ( $this->page - 1 ) * $this->meta->type->comments_per_page,
                'paged' => $this->page
            ]);

        }

    }

    static function count_replies( $comment_id ) {

        global $wpdb;

        $comment_id = (int) $comment_id;

        $results = $wpdb->get_row("
            SELECT COUNT( comment_ID ) AS count
            FROM {$wpdb->comments}
            WHERE comment_approved = 1
            AND comment_parent = {$comment_id}
        ");

        return (int) $results->count;

    }

}
